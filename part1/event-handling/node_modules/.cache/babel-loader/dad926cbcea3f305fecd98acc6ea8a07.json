{"ast":null,"code":"var _jsxFileName = \"/home/zavier/projects/webdev/react/fullstackopen/part1/event-handling/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [value, setValue] = useState(10);\n\n  const setToValue = newValue => {\n    setValue(newValue);\n  };\n\n  const Button = props => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: props.handleClick,\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [value, /*#__PURE__*/_jsxDEV(\"button\", {\n      handleClick: () => setToValue(1000),\n      text: \"thousand\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      handleClick: () => setToValue(0),\n      text: \"reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      handleClick: () => setToValue(value + 1),\n      text: \"increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"7UAQAh2ykPDdHAB4TCqEq4Uj1Jg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/zavier/projects/webdev/react/fullstackopen/part1/event-handling/src/App.js"],"names":["React","useState","App","value","setValue","setToValue","newValue","Button","props","handleClick","text"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMI,UAAU,GAAIC,QAAD,IAAc;AAC/BF,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,MAAM,GAAIC,KAAD,iBACb;AAAQ,IAAA,OAAO,EAAEA,KAAK,CAACC,WAAvB;AAAA,cAAqCD,KAAK,CAACE;AAA3C;AAAA;AAAA;AAAA;AAAA,UADF;;AAIA,sBACE;AAAA,eACGP,KADH,eAEE;AAAQ,MAAA,WAAW,EAAE,MAAME,UAAU,CAAC,IAAD,CAArC;AAA6C,MAAA,IAAI,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,WAAW,EAAE,MAAMA,UAAU,CAAC,CAAD,CAArC;AAA0C,MAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,WAAW,EAAE,MAAMA,UAAU,CAACF,KAAK,GAAG,CAAT,CAArC;AAAkD,MAAA,IAAI,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAnBD;;GAAMD,G;;KAAAA,G;AAqBN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst App = () => {\n  const [value, setValue] = useState(10);\n\n  const setToValue = (newValue) => {\n    setValue(newValue);\n  };\n\n  const Button = (props) => (\n    <button onClick={props.handleClick}>{props.text}</button>\n  );\n\n  return (\n    <div>\n      {value}\n      <button handleClick={() => setToValue(1000)} text='thousand' />\n      <button handleClick={() => setToValue(0)} text='reset' />\n      <button handleClick={() => setToValue(value + 1)} text='increment' />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}